{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multiple EM for Motif Elicitation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from Bio import SeqIO\n",
    "from sklearn.preprocessing import normalize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "w = 8 #width\n",
    "l = 101 #length\n",
    "\n",
    "# Helper dict for indexing\n",
    "let_dict = {\"A\":0, \"C\":1, \"G\":2, \"T\":3}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Read in Fasta Sequences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "fasta = SeqIO.parse(\"motif-regions.fa\", \"fasta\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['CGCTCATAAAACCATGCGCGTGTTTTTCTTCCACGGCGTTCTAGAAAAAAAAGAAAAATTCAAAAAGTTCTGCGAAACTCGAAAGAACCAGAATTGTTCGA', 'TCCACACTGACGGGGTCACGTGTGTTTATTCTGTTTTCTTCTAACGGCTTCTGTAGATTTCCGGACGGTTCCACGCAGCGCCACAGCTTGGTTCCAGATCG', 'CGTTCATGAAAGAGGCAACGATGGTGATCGATTATTTCCAGGAATTGTTCCATGACGTTCTACGTGGTTCTCTTGGTCGGGTAATACAATCAGGGTAACAT', 'GTAAAGTTACTGACACTTTTTTTTCTAGAAAGTTCCGGAAAATTGCGACACTCGGTGGAGCTCGAGAGTTGTATCCAGTTTTCTTGTTCGGCGATATTCCG', 'TGTCAGCGCGAGATGCCTTCCTCTTTTCTAACCTCCAAAAAACTTCCAGAAGATTCCAGTCCAAGAGGTATATCATTTCAAACGAATAAGCTGATTACAAC', 'GAGAAAAAACGCAAATGACAGCTTCTAAACGTTCCGTGTGCTTTCTTTCTAGAATGTTCTGGAAAGTTTACAACAATCCACAAGAACGAAAATGCCGTTGA', 'ATTACCCGCCTTTCTGTTTTCTGGGCACTTTTCTTTCTAGAAGGTGAAAGAACAATTTTTCTCGTTTTCTCGAACTTCCACCAAGCGTTGGGTAATGAGGG', 'GAAATTTCGTCAAAACCTCGAAGCTTTTTTTTTCGAAATCTTCGATGGAATGTTCTAGAAAAAAACTTCGAGAAAGTGAATCGGAAGAACTTCTCGGAAAA', 'AAAGCCCTTACTAACCCTACAATAAATTGTGCCGAAACCCTCTGGAGTTTTCTAGAATATTCTAGCCCCATCAGGGCTAGAATATCCTAAAAGTTTATAGT', 'GATGCTCTATTGCCTTTTCATTTCTTGAAAAAGAAATGAAAAAATTTTCTATTTTTTCGATGGCCTTCTATAATTTTGTACGAAATATTATAGGTCAGGTG', 'GAAATAGATTCCCAAAAAAAAAAAAAGGGATATTGTGTTACCCAGTTCACAATGGAATTTTCTAGAAGAAAAAACAAAGAAGCCTCGCAACAAACCAAGAT', 'AAGGTTATATTGACAAGTAGTGCTCTTTGGAAAAGGAATCTTCTAGAATCATCTTCGTTAAATTTCTTTTTTCATTGCCTTCGAAAAAAAAAAAGAAAAAA', 'TTTATTTAATCACATTATCCTTCTATGTATCTTTTTCCCCCGCTCGATTTCTTCTAGAACATTACGGAAAATAAAGGAAAAAAATGACTGGAGCATCGAAT', 'TTTTTTGGTACCGAAATTGGTTTATCCAGGATTATTCTAGAACGTTCTAGAAACAATACTGACCACAAAGACTTTTCGGAATAGAATATTGTCAAACAAGA', 'GCGGAGGCCAACAGTGGCTAGGCGGCAACGCCTGGAACACGCGCTTAAAAGTTCTGGAAGGTTCGCGAATTGAGAACTGCTCAGGGGCGAATACAGGGGCG', 'CCCCTATTCAAACGCGATGCCATTAGATGAAAGAACACTTCTAGAACATTCTGGAAAATAACAAATTTTATCAGAACAGAATCACACCTTGATTTGTCTGT', 'TTCAGCTTTTTCCAAATCAGAGAGAGCAGAAGGTAATAGAAGGTGTAAGAAAATGAGATAGATACATGCGTGGGTCAATTGCCTTGTGTCATCATTTACTC', 'CCGGTGAGTTGTTACTTTTTCATTCGAGCAATGAAGTACATTCTAGAAGTTCCTAGAACCTTATGGAAGCACCAAGAAAAAAGGAAGTTAAACAAAACACT', 'CTTCGACTATGCTGGAGGCAGAGATGATCGAGCCGGTAGTTAACTATATATAGCTAAATTGGTTCCATCACCTTCTTTTCTGGTGTCGCTCCTTCTAGTGC', 'TAATATTTGACTATGAGAACTGATATCTTCGTGAAGATTCGTGTAGTATGATAGAACATTCCAGAAAAAAAATTCAGATTCATCGCTCTCTCTTCGCTTCT', 'CACCGGAAAAAGAGGCAGGGGGCGGTGGAACCGGGCCGAAGCCCATGGAAAAGCTCTGCCGTTGTGGGTGATATACAATTATTCAGCGCATCTAAGGCACT', 'TTCCTTATATAGAATTGCTCTCCTCAACAAGTTTCGCCGAAACGGAACTTTCTAGAACCATCACTGTAAACGGCTATTAGTAATAGCGATCACGTGATTAT', 'GACTCATCATTCATCTAATTTTGCTATGTTAGCTGCAACTTTCTATTTTAATAGAACCTTCTGGAAATTTCACCCGGCGCGGCACCCGAGGAACTGGACAG', 'ACAACAAGGTCCTAGCGACGGCTCACAGGTTTTGTAACAAGCAATCGAAGGTTCTGGAATGGCGGGAAAGGGTTTAGTACCACATGCTATGATGCCCACTG', 'TTCTCAAAAGCAGTGGAAAAAAAAATCATTTCCCAGAAGAACGCGAGAGAACTCCATAGAAAAAAGGGAACTTTCCTACTCAAAAGAGAAAGGGAAAAATA', 'GGGTAAGAAATGACCGCAGCAGCATGAACATTCTAGAACAAAATTTGATTCCTTACCGAATGGAGAGAGGCCACGTTGTTAGGGGAGTAACAGCGCAATGA', 'AAGAGCGTGAGAGAATACGAGCGAAAAAGAAAGAAGAAAAATTTGGGTGCCATTGGCACAGACCCTAAAAGAGATGTGAGAGAAGTGGGCCATATATGTAT', 'ATTTTTATCAGTCAGAACGTTATTTCGCGCTGCAAGTTCCTTACTTTTCCATAGAGTTCCACAGGATGTAAAGAAAAATAATGATAAAAAAAAGCAGAACA', 'GCGTTGGTAGTCTTTTTTGCTGGAACGGTTCAGCGGAAAAGACGCATCGCTCTTTTTGCTTCTAGAAGAAATGCCAGCAAAAGAATCTCTTGACAGTGACT', 'TTTATACATAATCAAGCTTCTTTTTCCCATTCCTTCAAGATTCTAGAAATTTCTATCATTGATGACGGGCATTACCCCGTTAATGACCTTCACACGAATGA', 'TGAACTTTCTCCAGCTAGGGCGGAAAAATATTCTAGAAGCTCATAGAAATGCCGTTCAAAAGCGTAACAGTTATGTTCTATAAAGGGAAACAATGTGTTTC', 'AGGGTCACCCGATCGGTGAATCAATCCGCGGCGCAGAAATGTTCGTAGAGCTCTCGTTTCTTCTAGAACGCTCCCTTGATGAAACGAAAATTTCCATCACA', 'TCCGGGCAAAACGAAGCAAAATTAAAGTCACCCTCCCCATTTGGTTTTCTGGAAAATTCCACGAGGTCCGTATATGATGACATATACAGATGGGCGGCTAT', 'TGCGTGAAAAGATTATCAGCGCCCCTTTTTTTCTTCTTTGTTCTTAACGTTTCTTTTTCTTGCGGCTTATGCCCGTACTTATAAAACAACGGCCTCCCGTG', 'CAAAAGTAGACAAAATTACCCGCGCAGGCCTATTTTTCTAGAAGACAGAAGAAAAAAGTGGGCAGAGAAAGCGAGGAAAAAAAGAAATACATATGAAGAAG', 'GGGCCACGGCCATTACCAGAGACAGAAATGAGTGGAAGCGCGTGGAAGCCCGTCTAGCAGAGGAAGAAATTCGAGACGAGGCGGGACGTGGCGGGCTGGGC', 'CGTACTATTATTTTAAGAGAAGAACATCCATAGAAAAGAAAAGAAGAAAAAGAAACGAACCAGAAGAGGGTAGCAGAATCAGTCATTCACGCACCCGGCCT', 'GATTTAAGCAGACAATAACAATTTCCAAACGGAGACTTTTTTTTCCATGACATTCTAGAATTTGCACATTTTGGCACCTCTGAAAAGATTGCGGATGATAG', 'GTTCCAACCTCACTTTGTTTTTTCATTTTTTTATGTTTTTTCTAGAACCTTCTTTACGTGATTCTCGCTCGGAATCCGTCAATAGAATGTTTTCAGTCTCC', 'GCCAATTTGGGACTCTAACGGCAAACCTCGGATTTCCGTGGAAACGCATGGAAAAATTGATCCGGGCTGTGAGGGGAGTCGAGTCAGTCACTTTTTGGCAA', 'AAAATCGCTGGGATGGCCCTTGAAAAAATTTTTTCAGTGAAAAAAAAAAGAATTTTCGAGAAAAAAAAAAAATTAGGAATTGTGCGTGGTCATTCAATACG', 'CCGTGGCTCGGAAACGGTTCCTTCGTGACAATTCTAGAACAGGGGCTACAGTCTCGATAATAGAATAATAAGCGCATTTTTGCTAGCGCCGCCGCGGCGCC', 'CTTTTCAGAAAACTATAGCTTTGAGCCTGTATGCTATTTTTCTATTTCCTTCTTTGCAGTTCTTTTTTGAGCAGAGAACAATATCCGGGTCACGTGAAAGT', 'TCTCCTCTATTCCGCGGTAACCTATGGTCACGGCCAGATTTTTTCCAAGTATTTTTAGCTCAAAAGCTGAACCGCTTTAGCTGGCCGACTAAGCGAATCTT', 'TCCTACTATTTCCTTATTGAAAAAGTGGAAAACTGTTAAATCTGGAAATTCTTCACGATTCTAGAAAAATAGGAGGTGAAGAAGATTTCTAAGCTTTTTGA', 'CTGAAAAAGAGAAAAATAAGAAAATCTTCTAGAACGTTCCGAAACAGGACACTTAGCACACAAATACAGAATAGGAAAGTAAAAGGCAATATATGAATGCA', 'CTTTTTGCACTTTAGCAAAGCTGAGTTAATCTCGGAAAATCTCTGTGTCCTTCCTTTTTCTTCTAGCTTCCGTTCCGAGTCTCATCTTCTTTCCCGTGCCG', 'TCATTTTATATGGTGGCAAAATTTGGGATTAAGCGTAGGGCAATAAAACCTTCTCGGATCTTCCATTTTTTTCGATTGGGAAAATTTTAAGACTTGAAAAA', 'GAGGACGTGGAAGAAAAAGAAGAAGGAAGAAAAAAATTTGAAAGAAAAAAACGCGTGGCGGGTAAAGAAGAAAATGGAAAATAGAGGCCGGGTGACAGAGA', 'CCTTCACGTAAAGAGCCTAATACTCTTTCTTCAAAGCGCTAGATTGTTCTAAACGTTTCTTTAACTATTGTTTTCGTTCGTGCAGCGTGATTAACCGAGCC']\n"
     ]
    }
   ],
   "source": [
    "seqs = []\n",
    "for record in SeqIO.parse(\"motif-regions.fa\", \"fasta\"):\n",
    "    seqs.append(str(record.seq))\n",
    "print(seqs)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Create p_0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def init_p(l, w, seqs, let):\n",
    "    p = np.zeros((4, w+1))\n",
    "\n",
    "    # set a uniform background for each A C G T\n",
    "\n",
    "    for i in range(len(p)):\n",
    "        \n",
    "\n",
    "        p[i][0] = 0.25\n",
    "\n",
    "    # set motif positions\n",
    "    for i in range(l-w+1):\n",
    "        for sequence in seqs:\n",
    "            for j in range(w):\n",
    "\n",
    "                n = sequence[i+j]\n",
    "                p[let[n]][j+1] +=1\n",
    "                # Fill in p_0\n",
    "                \n",
    "    # normalize columns to sum to 1\n",
    "    p = normalize(p, axis = 0, norm = 'l1')\n",
    "    \n",
    "    return p"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Fill in EM iteration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_EM(l,w, seqs, let, init_p, up_prob, up_motif, epsilon = 2**-64):\n",
    "\n",
    "    no_change = False\n",
    "    \n",
    "    # set an initial p_t_1\n",
    "    p_t_1 = init_p(l, w, seqs, let)\n",
    "        \n",
    "    while not no_change:\n",
    "        # E step        \n",
    "        z_t = up_motif(l, w, p_t_1, seqs, let)\n",
    "        \n",
    "        # M step \n",
    "                \n",
    "        p_t = up_prob(w, z_t, seqs, let)\n",
    "        \n",
    "        diff = np.subtract(p_t, p_t_1)\n",
    "        \n",
    "        # Write a condition to stop the EM iterations (use epsilon and diff)\n",
    "        if diff.any() <= epsilon:        \n",
    "            no_change = True\n",
    "        else:\n",
    "            # Update p_t_1\n",
    "            p_t_1 = p_t\n",
    "                \n",
    "    return p_t, z_t"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Fill in function to update z_t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def up_motif(l, w, p_t_1, seqs, let):\n",
    "    z_t = np.zeros((len(seqs), l-w+1))\n",
    "\n",
    "    for i, sequence in enumerate(seqs):\n",
    "        for j in range(l-w+1):\n",
    "            \n",
    "            # Fill in z_t using p_t_1\n",
    "            # Ignore background as we're assuming 0.25 for all 4\n",
    "            z_t[i][j] = 1\n",
    "            \n",
    "            for s in range(len(sequence)):\n",
    "                n = sequence[s]\n",
    "                if s >= j and s < j+w: \n",
    "\n",
    "                    z_t[i][j] *= p_t_1[let[n]][s-j+1]\n",
    "                else:\n",
    "                    z_t[i][j] *= p_t_1[let[n]][0] #background\n",
    "            \n",
    "    \n",
    "    # Normalize z_t\n",
    "   \n",
    "    z_t = normalize(z_t, axis = 1, norm = 'l1') #axis = 0?\n",
    "        \n",
    "    return z_t"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Fill in function to update p_t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def up_prob(w, z_t, seqs, let):\n",
    "    p_t = np.zeros((4, w+1)) \n",
    "    n = np.zeros((4, w+1))\n",
    "    \n",
    "    # Fill in n for k > 0 - motif\n",
    "    for s in range(1, w+1):\n",
    "        for letter in let.keys():\n",
    "            sum_z = 0\n",
    "            for i, sequence in enumerate(seqs):\n",
    "                \n",
    "                # Write j_vals according to the condition seen in lecture\n",
    "               \n",
    "                j_vals = [a-s+1 for a in range(len(sequence)-w+1) if sequence[a] == letter] \n",
    "                                \n",
    "                # Add to the sum using z_t\n",
    "                \n",
    "                for j in j_vals:\n",
    "                    sum_z += z_t[i][j]\n",
    "            \n",
    "            # Fill in the correct indices\n",
    "            \n",
    "            n[let[letter]][s] = sum_z\n",
    "                 \n",
    "    # Fill in n for k == 0\n",
    "    \n",
    "    # May help to make the next step easier\n",
    "    joined_seq = \"\".join(seqs)\n",
    "    \n",
    "    # Create a dict with total counts of A,C,G,T\n",
    "\n",
    "    counts = {}\n",
    "    \n",
    "    for nuc in joined_seq: \n",
    "        if nuc in counts:\n",
    "            counts[nuc] += 1\n",
    "        else:\n",
    "            counts[nuc] = 1\n",
    "        \n",
    "    # Sum across the rows of n\n",
    "\n",
    "    sum_n_j = np.sum(n,axis = 0)    \n",
    "        \n",
    "    for letter in let.keys():\n",
    "        \n",
    "        # Fill in the correct indices and its value\n",
    "        n[let[letter]][0] = counts[letter] - sum_n_j[let[letter]]\n",
    "    \n",
    "    p_t = (n+1)/(sum_n_j+4)\n",
    "        \n",
    "    return p_t"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Run the EM to find the final p and z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "p_end, z_end = run_EM(l, w, seqs, let_dict, init_p, up_prob, up_motif)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Determine Motifs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[51 62 40 36 47 60 48 46 53 38 53 34 55 38 55 42 47 54 21 52 46 43 52 45\n",
      " 66 24 34 13 21 44 21 84 50  6  9 64 20 82 43 50 48 61 74 93 79 30 33 78\n",
      " 30 40]\n",
      "['CTAGAAAA', 'CTAACGGC', 'GGAATTGT', 'AATTGCGA', 'AACTTCCA', 'CTTTCTTT', 'AAGGTGAA', 'TTCGATGG', 'TCTGGAGT', 'AAAATTTT', 'CCCAGTTC', 'TTCTAGAA', 'CGCTCGAT', 'AACGTTCT', 'GCGCTTAA', 'CTAGAACA', 'AGGTGTAA', 'TTCTAGAA', 'TAACTATA', 'GTGTAGTA', 'GCCCATGG', 'AACGGAAC', 'TTCTATTT', 'GCAATCGA', 'ACGCGAGA', 'AAATTTGA', 'ATTTGGGT', 'TTACTTTT', 'GACGCATC', 'TTCTAGAA', 'TCATAGAA', 'GTTCGTAG', 'TTGGTTTT', 'TTCTTAAC', 'GAAGACAG', 'CGTGGAAG', 'AAGAAGAA', 'TTTTCCAT', 'TCTAGAAC', 'GAAACGCA', 'AAAAAAAA', 'AGGGGCTA', 'TCTATTTC', 'TTTTCCAA', 'TCTGGAAA', 'GAAACAGG', 'CTCTGTGT', 'CAATAAAA', 'AAAGAAAA', 'AGATTGTT']\n"
     ]
    }
   ],
   "source": [
    "motif_indices = np.argmax(z_end, axis=1)\n",
    "print(motif_indices)\n",
    "\n",
    "# Get the 'width' characters long motifs using seqs\n",
    "for index in motif_indices:\n",
    "    motifs = [sequence[index:index+8] for sequence in seqs]\n",
    "print(motifs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
